1. We created a new table named language, then created a sequence that would populate the surrogate keys to start at the last inputed language. We then imported the language data from the text file into this table. For the costumer Robert De Niro, we performed a SELECT query to find the full name of the language using her preferred language's abbreviation. But that language did not exist in the language table, so we had to create/add her preferred language which was hindi, from India into the language table. 

2. The issues related to natural keys, or multi-column keys that we came across when addressing the database tables are that many of them are not easily identified by their natural/multi-column keys, so when joining tables it makes it more difficult, and not a great choice for large scale database systems. The situation is rectified by creating surrogate keys for them, we made the database design easier to implement, its minimal and is stable over time.

  There was a case where we had to make a sequence for a table which populates a surrogate key which replaces the original primary in a table, where their original primary key was a type varchar2. So we had to create a column, who is numeric type, which holds a unique id that will be the pirmary key for that table. We also created a trigger that uses a sequence to populate that column.
  
  Another case,  where we had to make a sequence for a table which populates a surrogate key which replaces the original primary in a table, where their original primary key was a multi-column key. So we, had to create a constraint where both must be unique together in order to show the uniqueness of each row.
